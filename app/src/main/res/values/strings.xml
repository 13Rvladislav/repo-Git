<resources>
    <string name="app_name">itcity</string>

    <string name="tap_to_continue">tap to continu</string>
    <string name="button2">Button</string>

    <string-array name="choice_items2">
        <item>Результативность</item>
        <item>Массовость</item>
        <item>Дискретность</item>
        <item>Детерминированность</item>
    </string-array>

    <string-array name="choice_items3">
        <item>Словесно-формульная </item>
        <item>Графическая</item>
        <item>Псевдокод</item>
        <item>Программа</item>
    </string-array>

    <string-array name="choice_items5">
        <item>Линейная</item>
        <item>Ветвящаяся</item>
        <item>Циклическая</item>
    </string-array>

    <string-array name="secchoice_items1">
        <item>Бесплатный фриланс</item>
        <item>Сообщения на почту о благотворительности,выигрыше</item>
        <item>Покупка билетов онлайн</item>
        <item>Во всех перечисленных</item>
        <item>Не в каких из вышеперечисленных</item>
    </string-array>

    <string-array name="secchoice_items2">
        <item>Проверить, существует ли такая организация, и, если да, то перевести деньги на указанный счет</item>
        <item>Перевести деньги на лечение ребенка</item>
        <item>Проигнорировать данное сообщение</item>
    </string-array>

    <string-array name="secchoice_items3">
        <item>Переслать реквизиты</item>
        <item>Позвонить в банк и узнать о состоянии карты</item>
        <item>Покупка билетов онлайн</item>
    </string-array>
    <string-array name="secchoice_items5">
        <item>Проверить, не является ли ссылка фальшивой</item>
        <item>Позвонить отправителю и спросить, была ли им отправлена эта ссылка</item>
        <item>Проигнорировать сообщение</item>
    </string-array>

    <string-array name="compchoice_items2">
        <item>Материнская плата</item>
        <item>Блок питания</item>
        <item>Корпус</item>
    </string-array>

    <string-array name="compchoice_items5">
        <item>Кард-ридер</item>
        <item>Флешка</item>
        <item>Web-камера</item>
        <item>Колонки</item>
        <item>Монитор</item>
        <item>Клавиатура</item>
        <item>Микрофон</item>
        <item>Мышь</item>
    </string-array>
    <string-array name="infchoice_items10">
        <item>Эквивалентность</item>
        <item>Строгая дизъюнкция</item>
        <item>Импликация</item>
    </string-array>
    <string-array name="infchoice_items9">
        <item>Конъюнкция</item>
        <item>Дизъюнкция</item>
        <item>Отрицание</item>
    </string-array>
    <string-array name="infchoice_items12">
        <item>Взвешенный</item>
        <item>Неориентированный|невзвешенный</item>
        <item>Ориентированный</item>
    </string-array>
    //кнопки в меню
    <string name="action_item1">кнопка 1</string>
    <string name="action_item2">кнопка 2</string>
    <string name="action_item3">кнопка 3</string>
    <string name="action_item4">кнопка 4</string>
    //кнопка главного экрана
    <string name="string">нажмите для продолжения...</string>
    <string name="strAVT">АВТОРИЗАЦИЯ</string>
    <string name="enter">ВОЙТИ</string>
    <string name="reg">создать</string>
    <string name="email">Email:</string>
    <string name="password">Password:</string>
    <string name="create">создать</string>
    <string name="comin">Войти</string>
    <string name="title_activity_registration">ActivityRegistration</string>
    <!-- Strings used for fragments for navigation -->
    <string name="first_fragment_label">First Fragment</string>
    <string name="second_fragment_label">Second Fragment</string>
    <string name="next">Next</string>
    <string name="previous">Previous</string>

    <string name="hello_first_fragment">Hello first fragment</string>
    <string name="hello_second_fragment">Hello second fragment. Arg: %1$s</string>
    <string name="textview1">TextView</string>
    <string name="todo1">TODO</string>
    <string name="logs">Логин</string>
    <string name="passw">Пароль</string>
    <string name="todo23232">TODO</string>
    <string name="regi">РЕГИСТРАЦИЯ</string>
    <string name="textview2">TextView</string>
    <string name="textview3">TextView</string>
    <string name="zabps">Забыли пароль?</string>
    <string name="netakk">Ещё нет аккаунта?</string>
    <string name="u8">Логин</string>
    <string name="f">Пароль</string>
    <string name="come">ВОЙТИ</string>
    <string name="register">РЕГИСТРАЦИЯ</string>
    <string name="usname">Имя пользователя</string>
    <string name="passsword">Пароль</string>
    <string name="pass2">Повторите пароль</string>
    <string name="registrat">ЗАРЕГИСТРИРОВАТЬСЯ</string>
    <string name="email1">Email</string>
    <string name="buttonmap3">Button</string>
    <string name="todo33">TODO</string>
    <string name="todo23">TODO</string>
    <string name="df">Ваш рейтинг</string>
    <string name="title_activity_computer__teory__task">Computer_Teory_Task</string>
    <string name="title_activity__profile">Activity_Profile</string>
    <string name="title_activity_security__teory__task">Security_Teory_Task</string>
    <string name="_3_n_n_10_if_x_10_n_min_n_max_n"><![CDATA[3. Начало\nВвести данные\nЕсли переменная меньше 10 или if(x < 10)\nВывести «Min»\nИначе вывести «Max»\nКонец]]></string>
    <string name="title_activity_fullscreen">FullscreenActivity</string>
    <string name="dummy_button">Dummy Button</string>
    <string name="dummy_content">DUMMY\nCONTENT</string>
    <string name="include_iostream_nusing_nnamespace_nstd_nint_nmain_n_nreturn_0_n"><![CDATA[#include <iostream>\nusing\nnamespace\nstd;\nint\nmain()\n{\nreturn 0;\n}]]></string>
    <string name="n_1_5_5_n_2_n_3_n_4_n_5_n">Мы можем\n 1. сложить два числа 5+5\n 2. вычесть одно число из другого\n 3. разделить одно число на другое\n 4. умножить\n 5. получить остаток от деления\n</string>
    <string name="n_include_iostream_nusing_namespace_std_nint_main_nint_a_5_nint_b_6_nint_c_a_b_ncout_c_endl_nreturn_0_n"><![CDATA[Пример:\n#include<iostream>\nusing namespace std;\nint main(){\nint a=5;\nint b=6;\nint c=a+b;\ncout <<c<<endl;\nreturn 0;\n}]]></string>
    <string name="_2_main_void">Функции – это именованный фрагмент кода, который повторяется в программе 2 или больше раз. Когда мы пишем функцию, необходимо указать тип и дать ей имя и в дальнейшем, чтобы её вызвать в программе (из main() или из другой функции), надо обратиться к ней по этому имени. Функция может возвращать значения, если это функция не типа void.</string>
    <string name="n_include_iostream_n_using_namespace_std_n_int_main_n_cout_n_cout_n_system_pause_n_return_0_n"><![CDATA[#Реализация без функции\n #include <iostream>\n using namespace std;\n int main() {\n cout << \'Функция очень хороший инструмент в программировании\';\n cout << \'С помощью его можно улучшить свой уровень программирования\';\n system (\'pause\')\n return 0;\n }]]></string>
    <string name="n_include_iostream_n_using_namespace_std_n_void_func_n_cout_n_cout_n_n_int_main_n_func_n_system_pause_n_return_0_n"><![CDATA[А вот если бы мы использовали функции, то у нас получилось бы так:\n #include <iostream>\n using namespace std;\n void func () { // функция\n cout << \'Функция очень хороший инструмент в программировании\';\n cout << \'С помощью его можно улучшить свой уровень программирования\';\n }\n int main() {\n func(); // вызов функции\n system (\'pause\')\n return 0;\n }]]></string>
    <string name="fdfd">Массив – это область памяти, где могут последовательно храниться несколько значений. Массивы бывают двух типов одномерные и многомерные.</string>
    <string name="m_n_n_n_n_n_n_int_a_15_n_double_35_n_n_n_m_n_n_m_n_m_n_n_int_s_2_4_1_2_3_4_5_6_n">Описание одномерного массива: m\n Тип_массива идентификатор_массива [n]\n n – количество элементов массива по соответствующей размерности.\n Примеры описания одномерного массива:\n int a [15];\n double[35];\n Описание двумерного массива:\n Тип_массива идентификатор_массива [n] [m]\n n,m - количество элементов массива по соответствующей размерности (т.е. общее количество элементов массива равно n*m)\n Пример описания двумерного массива:\n int S [2] [4] = { {1,2,3,4}, {5,6}};\n</string>
    <string name="n_1_n_ndouble_f_1_0_2_0_3_0_4_0_5_0_n_nint_m_10_1_2_3_n_2_n_int_i_n_int_a_const_n_for_i_0_i_const_i_n_n_cin_a_i_n_n_3_n_a_2_b_2_c_k_n"><![CDATA[Инициализация элементов массива:\n 1. Вариант инициализации массива при описании\n - перечисление начальных значений элементов массива без указания размера массива (вычисляется автоматически)\ndouble f [] = {1.0, 2.0, 3.0, 4.0, 5.0}\n - если в определении массива явно указан его размер, то количество начальных значений не может быть больше, чем объявленная длина массива. Если количество начальных значений меньше, чем объявленная длина, то инициализируются только первые элементы.\nint M[10] = {1,2,3}\n 2. инициализация массива при вводе значений в цикле, например с клавиатуры:\n int i;\n int a[const];\n for(i=0, i<const, i++)\n {\n Cin>>a[i];\n }\n 3. Инициализация в процессе вычислений:\n a[2]= b[2] + c[k];\n]]></string>
    <string name="c">Встречаются ситуации, когда программе нужно выбрать, какую операцию ей выполнить, в зависимости от определенного условия. К примеру, мы вводим с клавиатуры целое число. Если это число больше десяти, то программа должна выполнить одно действие, иначе — другое. Реализуем этот алгоритм на C++ с помощью конструкции ветвления.</string>
    <string name="include_iostream_n_using_namespace_std_n_int_main_n_setlocale_0_n_double_num_n_cout_n_cin_num_n_if_num_10_10_n_cout_10_endl_n_else_n_cout_10_endl_n_n_return_0"><![CDATA[#include<iostream>\n using namespace std;\n int main(){\n setlocale(0, “”);\n double num;\n cout<<“Введите произвольное число:”;\n cin>>num;\n if(num<10){ // Если число меньше 10.\n cout<<“Это число меньше 10”<< endl;\n } else { //иначе\n cout<<“Это число больше либо равно 10.”<< endl;\n }\n return 0;]]></string>
    <string name="hghhhh">Если вы запустите эту программу, то при вводе числа, меньшего десяти, будет выводиться соответствующее сообщение. Если введенное число окажется большим, либо равным десяти — отобразится другое сообщение.</string>
    <string name="if_n_if_if">Оператор if\nОператор if служит для того, чтобы выполнить какую-либо операцию в том случае, когда условие является верным. Условная конструкция в С++ всегда записывается в круглых скобках после оператора if. Внутри фигурных скобок указывается тело условия. Если условие выполнится, то начнется выполнение всех команд, которые находятся между фигурными скобками.</string>
    <string name="n_if_num_10_10_n_cout_10_endl_n_else_n_cout_10_endl_n_n_num_10"><![CDATA[Пример конструкции ветвления\n if(num<10){ // Если число меньше 10.\n cout<<“Это число меньше 10”<< endl;\n } else { //иначе\n cout<<“Это число больше либо равно 10.”<< endl;\n }\n Здесь говорится: «Если переменная num меньше 10 — вывести соответствующее сообщение.]]></string>
    <string name="iostream_include_iostream">В С++ разработана новая библиотека ввода-вывода iostream, #include – директива с помощью, которой подключаются заголовочные файлы и файлы библиотек. Библиотека iostream определяет два стандартных потока:</string>
    <string name="_1_cin_stdin">1.\tcin стандартный входной поток (stdin в С)</string>
    <string name="g">Существует два способа перейти на новую строку:</string>
    <string name="cout_hello_world_n"><![CDATA[Пример: cout << hello world! \n;]]></string>
    <string name="_2_n_cout_n">2. Второй способ — символ новой строки \n. При использовании одного выражения cout с тем количеством \n, которое необходимо, выведет множество строк текста.</string>
    <string name="cout_hello_world_endl"><![CDATA[Пример: cout << hello world<< endl;]]></string>
    <string name="_1_endl">1.\tПервый способ — это использование манипулятора endl, который означает переход на новую строку.</string>
    <string name="int_a">int a;</string>
    <string name="microsoft_visual_studio_using_namespace_std">Для их использования в Microsoft Visual Studio необходимо прописать строку: using namespace std;(подключение пространства имен, но с этим мы разберемся в следующих уроках)</string>
    <string name="cout_a"><![CDATA[Вывод cout <<a; выводит значение из переменной а;]]></string>
    <string name="cin_a"><![CDATA[Ввод cin>> a; кладем введенное значение в переменную а;]]></string>
    <string name="_2_cout_stdout">2.\tcout стандартный выходной поток (stdout в С)</string>
    <string name="t_t_t">\t\t\tТеперь я хочу рассказать тебе про ввод и вывод в языке С++, а также о том, как можно осуществлять переход на новую строку.</string>
    <string name="xxxx">ПРОГАММИРОВАНИЕ</string>
    <string name="forfff">Ну что ж давай попробуем изучить циклы. Сейчас мы изучим цикл for с параметром.</string>
    <string name="do_while_do_while">Цикл do while используют, когда требуется выполнять много одинаковых или похожих действий. Этот цикл работает до тех пор пока верно некоторое условие. Поэтому часто его называют цикл до. Цикл do while можно составить так:</string>
    <string name="do_n_n_n_while_n"><![CDATA[do\n {\n <тело цикла>\n }while <условие>\n]]></string>
    <string name="while_do_nbegin_n_nend"><![CDATA[while <условие> do\nbegin\n<тело цикла>\nend;]]></string>
    <string name="do_while">Давай теперь разберем цикл do while с постусловием.</string>
    <string name="for_1_2_3">for(выражение 1; выражение 2; выражение 3;) тело цикла</string>
    <string name="whilddd">Вот пришло время изучить цикл while с предусловием.</string>
    <string name="for_5_n_for_i_j">Цикл FOR задаёт, определённое условие по которому программа будет работать до его выполнения, допустим нужно нам 5 (или n) раз зациклить программу, то это легко сделать с помощью данного цикла. У цикла FOR есть характерная черта - счетчик который обычно обозначается буквой i или j. Внешний вид цикла с параметром:</string>
</resources>